syntax = "proto3";
option java_package = "com.gotokeep.keep.protobuf";
option java_outer_classname = "B3Workout";

//辅助运动准备
message PrepareWorkout {
  //动作类型
  uint32 workout_type = 1;
}

//辅助运动开始
message StartWorkout {
  //运动类型
  uint32 workout_type = 1;
  //是否需要3、2、1、GO，1需要 0不需要
  uint32 count_down = 2;
  //总进度
  uint32 progress = 3;
  //需要返回的数据类型，相应位为 1 表示需要返回，bit0 ：心率，bit1 ：步数
  uint32 return_data = 4;
  //数据
  WorkoutInfo workout_info = 5;
  // 是否会应答 0E08
  uint32 workout_data_ack = 6;
  // APP 下发辅助运动本次课程开始的 utc，用于区分是否是新开课程还是课程接续
  uint32 class_start_utc = 7;
}


message WorkoutInfo {
  //运动状态 1运动中，2暂停， 3 休息中
  uint32 workout_status = 1;
  //当前进度，0 -- 100
  uint32 current_progress = 2;
  //目标类型，1 ：距离， 2 ：时间，3 ：消耗， 4 ：配速
  uint32 goal_type = 3;
  //目标值
  uint32 goal_value = 4;
  //支持的操作类型
  uint32 operation_type = 5;
  //展示数据
  repeated DisplayData display_data = 6;
  //运动时长
  uint32 sport_time = 7;
  // 目标当前值
  uint32 goal_current_value = 8;
}

message DisplayData {
  //数据类型，1：配速，2：距离，3：消耗，4：计时/计次
  uint32 data_type = 1;
  //数据值
  uint32 data_value = 2;
}

message EndWorkout {
  //结束时，手环端是否需要先展示提示再返回表盘，0 -- 不需要展示提示，1 -- 需要展示提示
  uint32 need_prompt = 1;
  // 结束时，手环端是否需要先展示数据，0 -- 不需要展示，1 -- 需要展示
  uint32 need_display_data = 2;
  // 运动类型，参考 [辅助运动类型说明]
  uint32 sport_type = 3;
  // 展示数据，max_count：10
  repeated DisplayData display_data = 4;
  // 轨迹缩略图是否有效：0 - 无效  1 - 有效
  uint32 gps_track_valid = 5;
  // 轨迹缩略图宽：像素
  uint32 track_w = 6;
  // 轨迹缩略图高：像素
  uint32 track_h = 7;
  // 0：一个点 2 个字节，1：一个点 4 个字节
  uint32 track_data_width = 8;
  // bytes,  B4 - 400 字节
  // 起点：第一个点的数据
  // 终点：最后一个点的数据
  bytes track_points_data = 9;
  // 对 B4 及 Blite 生效
  // 0 -- 正常结束，1 -- 异常结束，如 iOS 端 App 被 kill 时下发结束
  uint32 end_exception = 10;
}

message EndWorkoutStatus {
  //2 成功，1 失败
  uint32 status = 1;
}

//辅助运动更新数据
message WorkoutData {
  //心率
  uint32 heartrate = 1;
  //活动量
  uint32 activity = 2;
  //步数
  uint32 step = 3;
  // 最大摄氧量，只有辅助运动户外跑步时才支持。单位：mL/(kg·min)；范围：[25.0, 80.0]，不出值时/不支持时：0.0
  float  vo2max = 4;
  // 燃脂重量，单位（mg）,取值范围[0, 1000].
  // 备注：
  // 重量传差值，APP 累计差值；
  // 页面显示按浮点类型，单位是 g，精度0.01g；
  // 协议按整型传，扩大1000倍，降低精度丢失。
  uint32 fat_gain = 5;
  // 燃脂占比，百分比，取值[0,100].
  uint32 fat_ratio = 6;
  // 有氧训练效果 实际训练效果 x 10
  uint32 training_effect_aerobic = 7;
  // 无氧训练效果 实际训练效果 x 10
  uint32 training_effect_anaerobic = 8;
}

// 辅助运动更新数据响应
message WorkoutDataAck {
    uint32 status = 1;
}

message WorkoutStatus {
  //2成功，1失败
  uint32 status = 1;
}

// 辅助运动联动状态同步
message WorkoutStatusSync{
  // 运动类型
  uint32 workout_type = 1;
  // 客户端的动作：
  // 0 -  NA
  // 1 - 弹窗
  // 2 - 开始
  // 3 - 暂不开始
  uint32 action = 2;
  // 0 - 无异常
  // 1 - 异常
  uint32 status = 3;
  // 0 - NA
  // 1 - 无权限
  uint32 err_code = 4;
  // 异常消息文案，最大 100 字节，uft-8 编码
  bytes err_msg = 5;
}

// 辅助运动联动状态同步结果 1： 成功， 2 ： 失败 , 3：不支持
message WorkoutStatusSyncResult {
  uint32 status = 1;
}
